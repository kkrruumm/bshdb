#!/usr/bin/env sh
# bshdb - a small shell database library for shell scripts that definitely isn't extremely cursed.
# Read documentation for this library on https://github.com/kkrruumm/bshdb before use.

create_database() {

    if [ ! -e "$1" ]; then
        touch "$1" || return 1
        cat <<__EOF__ > "$1"
# This is a bshdb database file. DO NOT EDIT THIS FILE MANUALLY.
entries=''
__EOF__

    elif [ -e "$1" ]; then
        return 1
    fi

    return 0
}

delete_database() {

    if [ -e "$1" ] ; then
        rm "$1" || return 1
    fi

    return 0

}

create_database_entry() {

    if . "$1" ; then
       if ! echo "$entries" | grep "$2" > /dev/null 2>&1 ; then

            if [ -z "$entries" ]; then
                output=$(sed -e "s/entries=.*/entries='$2'/g" "$1") || return 1
                echo "$output" > "$1" || return 1
            else
                output=$(sed -e "s/entries=.*/entries='$entries $2'/g" "$1") || return 1
                echo "$output" > "$1" || return 1
            fi

            cat <<__EOF__ >> "$1"
$2() {
    fields=''
}
__EOF__

       else
            return 1 
       fi
    fi

    return 0

}

delete_database_entry() {

    if . "$1" ; then
        if echo "$entries" | grep "$2" > /dev/null 2>&1 ; then
            output=$(sed '/'$2'()/,/}/d' "$1") || return 1
            echo "$output" > "$1" || return 1

            header=$(head -2 "$1")

            if echo "$header" | grep "entries='$2 " > /dev/null 2>&1 ; then
                output=$(sed 's/'$2'[ \t]//g' "$1") || return 1
                echo "$output" > "$1" || return 1
            elif echo "$header" | grep "entries='$2'" > /dev/null 2>&1 ; then
                output=$(sed 's/'$2'//g' "$1") || return 1
                echo "$output" > "$1" || return 1
            else
                output=$(sed 's/[ \t]'$2'//g' "$1") || return 1
                echo "$output" > "$1" || return 1
            fi
        fi
    fi
    
    return 0

}

create_database_entry_field() {

    if . "$1" ; then
        if echo "$entries" | grep "$2" > /dev/null 2>&1 ; then
            output=$(sed "/$2() {/a \ \ \ \ $3='$4'" "$1") || return 1
            echo "$output" > "$1" || return 1
        fi

        "$2" || return 1
        lineNumber=$(grep -n "$2()" "$1" | cut -d: -f1) || return 1

        if sed -n '/'$2'()/,/}/p' "$1" | grep "fields=''" > /dev/null 2>&1 ; then
            output=$(sed "$lineNumber,/fields=/ s/fields=''/fields='$3'/" "$1") || return 1
            echo "$output" > "$1" || return 1
        else
            output=$(sed "$lineNumber,/fields='$fields'/ s/fields='$fields'/fields='$fields $3'/" "$1") || return 1
            echo "$output" > "$1" || return 1
        fi

    fi

    return 0

}

delete_database_entry_field() {
    
    if . "$1" ; then
        if echo "$entries" | grep "$2" > /dev/null 2>&1 ; then
            "$2" || return 1
            lineNumber=$(grep -n "$2()" "$1" | cut -d: -f1) || return 1
            eval fieldValue=\$${3} || return 1
            sedFunc=$(sed -n '/'$2'()/,/}/p' "$1")
            if [ -z "$fieldValue" ] && echo "$sedFunc" | grep "$3=''" > /dev/null 2>&1 ; then
                output=$(sed "$lineNumber,/$3=''/{/$3=''/d;}" "$1") || return 1
                echo "$output" > "$1" || return 1
            elif echo "$sedFunc" | grep "$3='$fieldValue'" > /dev/null 2>&1 ; then
                output=$(sed "$lineNumber,/$3='$fieldValue'/{/$3='$fieldValue'/d;}" "$1") || return 1
                echo "$output" > "$1" || return 1
            else
                return 1
            fi
           
            if echo "$sedFunc" | grep "fields='$3 " > /dev/null 2>&1 ; then
                output=$(sed "$lineNumber,/$3[ \t]/ s/$3[ \t]//" "$1") || return 1
                echo "$output" > "$1" || return 1
            elif echo "$sedFunc" | grep "fields='$3'" > /dev/null 2>&1 ; then
                output=$(sed "$lineNumber,/$3/ s/$3//" "$1") || return 1
                echo "$output" > "$1" || return 1
            elif echo "$sedFunc" | grep " $3" > /dev/null 2>&1 ; then
                output=$(sed "$lineNumber,/[ \t]$3/ s/[ \t]$3//" "$1") || return 1
                echo "$output" > "$1" || return 1
            fi 
        fi
    fi

    return 0

}

get_database_entries() {
    
    if . "$1" ; then
        if [ -z "$entries" ]; then
            return 1
        else
            echo "$entries" || return 1
        fi
    fi

    return 0

}

get_database_entry_fields() {
    
    if . "$1" ; then
        "$2" || return 1
        if [ -z "$fields" ]; then
            return 1
        else
            echo "$fields" || return 1
        fi
    fi

    return 0

}

get_database_field_value() {

    if . "$1" ; then
        "$2" || return 1
        if [ -z "$3" ]; then
            return 1
        else
            eval FieldValue=\$${3} || return 1
            echo "$FieldValue"
        fi
    fi

    return 0

}

set_database_field_value() {

    if . "$1" ; then
        if sed -n '/'$2'()/,/}/p' "$1" | grep "$3='" > /dev/null 2>&1 ; then
            lineNumber=$(grep -n "$2()" "$1" | cut -d: -f1) || return 1
            output=$(sed "$lineNumber,/$3=.*/ s/$3=.*/$3='$4'/" "$1") || return 1
            echo "$output" > "$1" || return 1 
        fi
    fi

    return 0

}
